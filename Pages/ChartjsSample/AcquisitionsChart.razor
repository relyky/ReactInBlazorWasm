@inject IJSRuntime jsr

<button class="btn btn-primary" @onclick=HandleClick>生成數據</button>

@if(f_loading)
{
  <div class="progress">
    <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 75%"></div>
  </div>
}

<div @ref=refRoot></div>

@code {

  ElementReference refRoot;

  List<AcquisitionInfo> data = new();
  bool f_loading = false;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    data = new()
    {
      new() { year = 2010, count = 10 },
      new() { year = 2011, count = 20 },
      new() { year = 2012, count = 15 },
      new() { year = 2013, count = 25 },
      new() { year = 2014, count = 22 },
      new() { year = 2015, count = 30 },
      new() { year = 2016, count = 28 },
    };
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender)
    {
      await jsr.InvokeVoidAsync("renderMyAcquisitionsChart", refRoot, "My Acquisitions Chart", data);
    }
  }

  async Task HandleClick()
  {
    try
    {
      f_loading = true;
      await Task.Delay(500);

      Random random = Random.Shared;
      data = Enumerable.Range(1970, 2023 - 1970).Select(year =>
        new AcquisitionInfo
          {
            year = year,
            count = random.Next(0, 100)
          }).ToList();

      // 刷新圖表
      await jsr.InvokeVoidAsync("renderMyAcquisitionsChart", refRoot, "My Acquisitions Chart", data);
    }
    catch(Exception ex)
    {
      throw ex;
    }
    finally
    {
      f_loading = false;
    }
  }

  record AcquisitionInfo
  {
    public int year { get; init; }
    public decimal count { get; init; }
  }
}