@page "/"
@inject IJSRuntime jsr

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<div @ref=refRoot></div>

<h4 class="py-3">這裡不在 React 元件裡面 count: @count</h4>

<div @ref=refTitleElement></div>

<MySelect Options=@optionList OnChange=@HandleSelectChange />
<p>Index selectedOption => @selectedOption?.value</p>

@code {
  ElementReference refRoot;
  ElementReference refTitleElement;
  int count = 0;
  ValueLabel? selectedOption;

  List<ValueLabel> optionList = new()
  {
    new("美式咖啡","美式咖啡"),
    new("卡布奇諾","卡布奇諾"),
    new("卡布奇諾","卡布奇諾"),
    new("摩卡","摩卡"),
    new("拿鐵","拿鐵"),
    new("焦糖瑪奇朵","焦糖瑪奇朵"),
    new("阿華田","阿華田"),
    new("chocolate","chocolate"),
    new("strawberry","strawberry"),
    new("vanilla","vanilla"),
  };

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender)
    {
      await jsr.InvokeVoidAsync("renderMyCounter", DotNetObjectReference.Create(this), refRoot, 123);
      await jsr.InvokeVoidAsync("renderMyTitle", refTitleElement, "我是抬頭");
    }
  }

  /// <summary>
  /// 當 React 元件有訊息送上來時觸發。
  /// </summary>
  [JSInvokable]
  public async Task OnCountChange(int newCount)
  {
    count = newCount;
    await InvokeAsync(StateHasChanged); // 需用非同步通告
  }

  async Task HandleSelectChange(ValueLabel selectedOption)
  {
    this.selectedOption = selectedOption;
    await Task.CompletedTask;
  }
}