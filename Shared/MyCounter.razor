@inject IJSRuntime jsr
@inject ILogger<MyCounter> logger

<div @ref=refRoot></div>

@code {
  [Parameter] public int InitCount { get; set; } = 0;
  [Parameter] public EventCallback<int> OnChange { get; set; }

  ElementReference refRoot;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if(firstRender)
    {
      await jsr.InvokeVoidAsync("renderMyCounter", DotNetObjectReference.Create(this), refRoot, InitCount);
      await OnChange.InvokeAsync(InitCount);
    }
  }

  public async Task ResetAsync()
  {
    logger.LogInformation("ON:Reset");
    await jsr.InvokeVoidAsync("renderMyCounter", DotNetObjectReference.Create(this), refRoot, InitCount);
    await OnChange.InvokeAsync(InitCount);
  }

  /// <summary>
  /// 當 React 元件有訊息送上來時觸發。
  /// </summary>
  [JSInvokable]
  public Task OnCountChange(int newCount) => OnChange.InvokeAsync(newCount);
}