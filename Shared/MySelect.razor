@inject IJSRuntime jsr

<div @ref=refRoot></div>

@code {
  [Parameter, EditorRequired] public List<ValueLabel> Options { get; set; } = default!;
  [Parameter] public ValueLabel? Value { get; set; }
  [Parameter] public EventCallback<ValueLabel> OnChange { get; set; }

  ElementReference refRoot;

  //List<ValueLabel> Options = new()
  //{
  //  new("摩卡","摩卡"),
  //  new("拿鐵","拿鐵"),
  //  new("焦糖瑪奇朵","焦糖瑪奇朵"),
  //  new("阿華田","阿華田"),
  //  new("chocolate","chocolate"),
  //  new("strawberry","strawberry"),
  //  new("vanilla","vanilla"),
  //};

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    await jsr.InvokeVoidAsync("renderMySelect", DotNetObjectReference.Create(this), refRoot, Options, Value);
    //※ 這邊的懶人做法可能導致過度刷新 React 元件
  }

  /// <summary>
  /// 當 React 元件有訊息送上來時觸發。
  /// </summary>
  [JSInvokable]
  public Task OnSelect(ValueLabel selectedOption) => OnChange.InvokeAsync(selectedOption);
}